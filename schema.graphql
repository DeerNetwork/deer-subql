type KVData @jsonField {
  key: String
  value: String
  type: String
}

type NftMetadata @jsonField {
  name: String
}


type Block @entity {
  id: ID!
  number: BigInt
  timestamp: Date
  parentHash: String
  specVersion: String
  stateRoot: String
  extrinsicRoot: String

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!

  method: String
  section: String
  args: [KVData]
  signer: Account
  nonce: BigInt
  timestamp: Date
  signature: String
  tip: String
  isSigned: Boolean
  isSuccess: Boolean

  block: Block
  events: [Event] @derivedFrom(field: "extrinsic")
  calls: [Call] @derivedFrom(field: "extrinsic")
}

type Call @entity {
  id: ID!

  section: String
  method: String
  args:[KVData]
  timestamp: Date
  isSuccess: Boolean

  signer: Account
  extrinsic: Extrinsic
  parentCall: Call

  calls: [Call] @derivedFrom(field: "parentCall")
}

type Event @entity {
  id: ID!

  index: Int
  section: String
  method: String
  data: [KVData]

  timestamp: Date
  blockNumber: BigInt
  block: Block
  extrinsic: Extrinsic
}

type Account @entity {
  id: ID!

  txCount: BigInt
  createAtBlock: Block

  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
  calls: [Call] @derivedFrom(field: "signer")
}

type Transfer @entity {
  id: ID!

  from: Account
  to: Account
  amount: BigInt

  extrinsic: Extrinsic
  timestamp: Date
}

type NftClass @entity {
  id: ID!

  owner: Account

  deposit: BigInt
  permission: Int
  metadata: NftMetadata
  metadataRaw: String
  totalTokens: BigInt
  totalIssuance: BigInt
  royaltyRate: Float
}

type NftToken @entity {
  id: ID!

  class: NftClass
  creator: Account

  tokenId: String
  metadata: NftMetadata
  metadataRaw: String
  deposit: BigInt
  quantity: BigInt
  royaltyRate: Float
  royaltyBeneficiary: String

  owners: [NftTokenOwner] @derivedFrom(field: "token")
  burns: [NftTokenBurn] @derivedFrom(field: "token")
  transfers: [NftTokenTransfer] @derivedFrom(field: "token")
  orders: [NftOrder] @derivedFrom(field: "token")
  offers: [NftOffer] @derivedFrom(field: "token")
  auctions: [NftAuction] @derivedFrom(field: "token")
}


type NftTokenOwner @entity {
  id: ID!

  owner: Account
  token: NftToken

  free: BigInt
  reserved: BigInt
}

type NftTokenBurn @entity {
  id: ID!

  owner: Account
  token: NftToken

  quantity: BigInt

  extrinsic: Extrinsic
  timestamp: Date
}

type NftTokenTransfer @entity {
  id: ID!

  token: NftToken
  from: Account
  to: Account

  quantity: BigInt
  reason: String

  extrinsic: Extrinsic
  timestamp: Date
}

type NftAuction @entity {
  id: ID!

  creator: Account
  token: NftToken
  currentBid: NftAuctionBid

  status: NftAuctionStatus

  kind: NftAuctionKind

  quantity: BigInt
  mixPrice: BigInt
  maxPrice: BigInt
  initPrice: BigInt
  minRaisePrice: BigInt
  deposit: BigInt
  openAt: BigInt
  deadline: BigInt
}

enum NftAuctionKind {
  DUTCH
  ENGLISH
}

enum NftAuctionStatus {
  NORMAL
  CANCEL
  REDEEM
}

type NftAuctionBid @entity {
  id: ID!

  bidder: Account
  token: NftToken

  price: BigInt
  bidAt: BigInt

  extrinsic: Extrinsic
  timestamp: Date
}

type NftOrder @entity {
  id: ID!

  creator: Account
  token: NftToken

  price: BigInt
  deposit: BigInt
  deadline: BigInt
  totalQuantity: BigInt
  quantity: BigInt

  status: NftOrderStatus
}

enum NftOrderStatus {
  NORMAL
  CANCEL
  PARTIAL_DEAL
  PARTIAL_CANCEL
  FULL_DEAIL
}

type NftOrderDeal @entity {
  id: ID!

  buyer: Account
  token: NftToken
  order: NftOrder

  quantity: BigInt
  fee: BigInt

  extrinsic: Extrinsic
  timestamp: Date
}

type NftOffer @entity {
  id: ID!

  creator: Account
  token: NftToken

  quantity: BigInt
  price: BigInt
  deadline: BigInt

  status: NftOfferStatus
}

enum NftOfferStatus {
  NORMAL
  CANCEL
  DEAL
}

type StorageFile @entity {
  id: ID!

  reserved: BigInt
  baseFee: BigInt
  fileSize: BigInt
  fee: BigInt
  liquidateAt: BigInt
  addAt: BigInt

  status: StorageFileStatus
  countAdd: Int
  countLiquidate: Int
  currentLiquidationId: String

  founds: [StorageFileFund] @derivedFrom(field: "file")
  liquidations: [StorageFileLiquidation] @derivedFrom(field: "file")
  replicas: [StorageFileReplica] @derivedFrom(field: "file")
}


enum StorageFileStatus {
  WAITING
  STORING
  INVALID
}

type StorageFileFund @entity {
  id: ID!

  fee: BigInt 
  file: StorageFile
  funder: Account

  extrinsic: Extrinsic
  timestamp: Date
}

type StorageFileLiquidation @entity {
  id: ID!

  fee: BigInt
  startAt: BigInt
  liquidateAt: BigInt
  currentReplicaIds: [String]

  file: StorageFile
  replicas: [StorageFileReplica] @derivedFrom(field: "liquidation")
}

type StorageNode @entity {
  id: ID!

  controller: Account @index
  stash: Account
  enclave: String
  deposit: BigInt
  rid: Int
  used: BigInt
  power: BigInt
  reportedAt: BigInt
  prevReportedAt: BigInt

  reports: [StorageReport] @derivedFrom(field: "machine")
  replicas: [StorageFileReplica] @derivedFrom(field: "machine")
}

type StorageFileReplica @entity {
  id: ID!

  addAt: BigInt
  deleteAt: BigInt

  liquidation: StorageFileLiquidation
  machine: StorageNode
  file: StorageFile
}

type StorageSession @entity {
  id: ID!

  used: BigInt
  power: BigInt
  mineReward: BigInt
  storeReward: BigInt
  paidMineReard: BigInt
  paidStoreReward: BigInt
  mine: BigInt
  endedAt: BigInt
  nodes: Int

  reports: [StorageReport] @derivedFrom(field: "session")
}

type StorageReport @entity {
  id: ID!

  machine: StorageNode
  session: StorageSession

  rid: Int
  used: BigInt
  power: BigInt
  deposit: BigInt
  mineReward: BigInt
  shareStoreReward: BigInt
  directStoreReward: BigInt
  slash: BigInt

  extrinsic: Extrinsic
  timestamp: Date
}